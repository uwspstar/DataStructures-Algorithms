//799. 香槟塔
/*
示例 1:
输入: poured(倾倒香槟总杯数) = 1, query_glass(杯子的位置数) = 1, query_row(行数) = 1
输出: 0.00000
解释: 我们在顶层（下标是（0，0））倒了一杯香槟后，没有溢出，因此所有在顶层以下的玻璃杯都是空的。

示例 2:
输入: poured(倾倒香槟总杯数) = 2, query_glass(杯子的位置数) = 1, query_row(行数) = 1
输出: 0.50000
解释: 我们在顶层（下标是（0，0）倒了两杯香槟后，有一杯量的香槟将从顶层溢出，位于（1，0）的玻璃杯和（1，1）的玻璃杯平分了这一杯香槟，所以每个玻璃杯有一半的香槟。
 
我们可以直接模拟整个过程。我们记录流入每个杯子的香槟的数量之和，例如对于一个杯子，流入的香槟数量为 10。由于这个数值大于 1，因此会有 9 数量的香槟流出这个杯子，并且会有 4.5 数量的香槟分别流入这个杯子下面的两个杯子中。以此类推。

总的来说，如果流入一个杯子的香槟数量为 X，且 X 大于 1，那么就会有 Q = (X - 1.0) / 2 数量的香槟流入下面的两个杯子中。我们可以从第一层的杯子开始，计算出第二层每个杯子中流入的香槟数量，再计算出第三层的数量，直到计算到第 query_row 层。

https://leetcode-cn.com/problems/champagne-tower/solution/champagne-tower-by-leetcode/
。
*/