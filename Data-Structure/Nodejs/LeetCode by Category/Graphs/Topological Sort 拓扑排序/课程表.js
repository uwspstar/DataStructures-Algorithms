//课程表

//https://zhuanlan.zhihu.com/p/135094687

//课程代号课程名称先修课程C1高等数学无C2程序设计基础无C3离散数学C1, C2C4数据结构C3, C5C5算法语言C2C6编译技术C4, C5C7操作系统C4, C9C8普通物理C1C9计算机原理C8. 这里有 9 门课程，有些课程是有先修课程的要求的，就是你要先学了「最右侧这一栏要求的这个课」才能再去选「高阶」的课程。
//图的两个要素是顶点和边，
//顶点：每门课
//边：起点的课程是终点的课程的先修课
//注意，有时候拓扑序并不是唯一的，比如在这个例子中，先学 C1 再学 C2，和先 C2 后 C1 都行，都是这个图的正确的拓扑序，但这是两个顺序了。
//所以面试的时候要问下面试官，是要求解任意解，还是列出所有解。

//入度：顶点的入度是指「指向该顶点的边」的数量；
//出度：顶点的出度是指该顶点指向其他点的边的数量。
//所以我们先执行入度为 0 的那些点，
//那也就是要记录每个顶点的入度。
//因为只有当它的 入度 = 0 的时候，我们才能执行它。
//我们可以用一个 HashMap 来存放这个信息，或者用一个数组会更精巧。

//算法详解 https://zhuanlan.zhihu.com/p/135094687
//C1C2C3C4C5C6C7C8C9入度002212211
//当我们把 C1 拿出来执行，那这意味这什么？意味着「以 C1 为顶点」的「指向其他点」的「边」都消失了，也就是 C1 的出度变成了 0
//首先可以把[C1, C2]放入容器中，
//C3C4C5C6C7C8C9入度1212201
//那我们这里看到很关键的一步，C8 的入度变成了 0！
//也就意味着 C8 此时没有了任何依赖，可以放到我们的 queue 里等待执行了。
//此时我们的 queue 里就是：[C2, C8].

//==========================
//这里我们的入度表格可以用 map 来存放，关于 map 还有不清楚的同学到我公众号查看文章哦～
//Map: <key = Vertex, value = 入度></key>
